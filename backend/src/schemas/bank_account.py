from pydantic import BaseModel, field_validator
from datetime import datetime
from typing import Optional

class BankAccountBase(BaseModel):
    account_name: str
    customer_id: int
    balance_cents: int = 0
    currency: str = 'USD'  # default value
    notes: Optional[str] = None

    @field_validator('currency')
    def currency_must_be_valid(cls, v):
        valid_currencies = ['USD', 'EUR', 'GBP']  # add more as needed
        if v not in valid_currencies:
            raise ValueError(f'Currency must be one of {valid_currencies}')
        return v

    @field_validator('balance_cents')
    def balance_must_be_positive(cls, v):
        if v < 0:
            raise ValueError('Balance cannot be negative')
        return v

class BankAccountCreate(BankAccountBase):
    # Only fields needed for creation
    pass

class BankAccount(BankAccountBase):
    # All fields including those generated by the database
    id: int
    created_at: datetime
    deleted: bool

    class Config:
        orm_mode = True